 
<head>
    <meta charset="UTF-8">
<!--    引入three.js-->
    <script src="https://cdn.bootcss.com/three.js/r83/three.js"></script>
<!--    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/103/three.min.js"></script>-->
    <title>a</title>
    <style>
        /* 将margin设为0,overflow设为hidden，全屏显示 */
        body {
            margin: 0;
            overflow: hidden;  /* 超出部分隐藏 */
        }
    </style>
</head>
<body>
<div id="webgl-output"></div>

<script type="text/javascript">
    // 一旦所有东西都被加载，我们运行我们的Three.js东西
    function init() {
        // 创建一个场景，其中包含所有元素，如对象、相机和灯光
        var scene = new THREE.Scene();
        // 创建一个摄像头，它定义了我们看的地方
        // PerspectiveCamera(透视摄像机)、第一个属性是视野角度(FOV)、第二个值是长宽比(aspect ratio)、接下来的两个值是远剪切面和近剪切面
        var camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000)
        // 创建一个渲染器(负责计算指定相机角度下浏览器中scene的样子)和设置大小
        var renderer = new THREE.WebGLRenderer();
        renderer.setClearColor(new THREE.Color(0xEEEEEE, 1.0));  // 将renderer对象的背景色设置为0xEEEEEE
        renderer.setSize(window.innerWidth, window.innerHeight);  // 让renderer对象将scene渲染成多大的尺寸
        renderer.shadowMapEnabled = true;  // 告诉渲染器需要阴影⭐️
        // 在屏幕中显示轴
        // var axes = new THREE.AxisHelper(20);  // axes坐标轴对象
        // scene.add(axes);  // 把坐标轴添加到场景中去
        
        // 创建接地面
        var planeGeometry = new THREE.PlaneGeometry(60, 20);  // PlaneGeometry: 平面几何 (参数: 宽60, 高20)
        var planeMaterial = new THREE.MeshLambertMaterial({color: 0xffffff});  // // MeshLambertMaterial:网格材质 (用来设置平面的外观, 颜色，透明度等)
        var plane = new THREE.Mesh(planeGeometry, planeMaterial);  // 把这2个对象合并到一个名为plane(平面)的Mesh(网格)对象中
        // 旋转并定位平面
        plane.receiveShadow = true;  // 平面接收阴影⭐️
        plane.rotation.x = -0.5 * Math.PI;  // 绕X轴旋转90度
        plane.position.x = 15;  // 平面坐标位置
        plane.position.y = 0;
        plane.position.z = 0;
        scene.add(plane);  // 把平面添加到场景
        // 创建一个立方体
        var cubeGeometry = new THREE.BoxGeometry(4, 4, 4);  // 立方体几何
        var cubeMaterial = new THREE.MeshLambertMaterial({color: 0xff0000});  // 立方体材质(颜色、wireframe: true线框)
        var cube = new THREE.Mesh(cubeGeometry, cubeMaterial);  // 立方体和外观合并
        cube.castShadow = true;  // 立方体阴影⭐️
        cube.position.x = -4;  // 立方体的坐标位置
        cube.position.y = 3;
        cube.position.z = 0;
        scene.add(cube);  //把立方体添加到场景
        // 创建一个球体
        var sphereGeometry = new THREE.SphereGeometry(4, 20, 20);  // 球体
        var sphereMaterial = new THREE.MeshLambertMaterial({color: 0x7777ff});  // 球体的外观(颜色、wireframe: true线框)
        var sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);  // 球体与外观合并
        sphere.castShadow = true;  // 球体的阴影
        sphere.position.x = 20;  // 球体的位置
        sphere.position.y = 4;
        sphere.position.z = 2;
        scene.add(sphere);  // 把圆添加到场景
        // 将摄像机定位并指向场景中心
        camera.position.x = -30;
        camera.position.y = 40;
        camera.position.z = 30;
        camera.lookAt(scene.position);  // lookAt函数指向场景的位置
        // 添加一个光源⭐️
        var spotLight = new THREE.SpotLight(0xffffff);
        spotLight.position.set(-40, 60, -10);
        spotLight.castShadow = true;    // 让光源产生阴影
        scene.add(spotLight);
        // 将渲染器的输出添加到html元素中
        document.getElementById('webgl-output').appendChild(renderer.domElement);
        // 渲染的场景
        renderer.render(scene, camera)
    }
    window.onload = init;
</script>
</body>
</html>

 
 
 // componentDidMount() {
  //   //创建一个场景（场景是一个容器，用于保存、跟踪所要渲染的物体和使用的光源）
  //   let scene:any = new THREE.Scene()

  //   //创建一个摄像机对象（摄像机决定了能够在场景里看到什么）
  //   // var camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000)
  //   var camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.9, 100)

  //   //设置摄像机的位置，并让其指向场景的中心（0,0,0）
  //   camera.position.x = -30
  //   camera.position.y = 40
  //   camera.position.z = 30
  //   camera.lookAt(scene.position)

  //   //创建一个WebGL渲染器并设置其大小
  //   var renderer = new THREE.WebGLRenderer()
  //   renderer.setClearColor(new THREE.Color(0xeeeeee))
  //   renderer.setSize(window.innerWidth, window.innerHeight)

  //   //在场景中添加坐标轴
  //   var axes = new THREE.AxisHelper(20)
  //   scene.add(axes)

  //   //创建一个平面
  //   var planeGeometry = new THREE.PlaneGeometry(60, 20)
  //   //平面使用颜色为0xcccccc的基本材质
  //   var planeMaterial = new THREE.MeshBasicMaterial({ color: 0xcccccc })
  //   var plane = new THREE.Mesh(planeGeometry, planeMaterial)

  //   //设置屏幕的位置和旋转角度
  //   plane.rotation.x = -0.5 * Math.PI
  //   // plane.rotation.x = -0.75 * Math.PI
  //   // plane.rotation.x = 0
  //   plane.position.x = 10
  //   // plane.position.x = 15
  //   plane.position.y = 0
  //   plane.position.z = 0

  //   //将平面添加场景中
  //   scene.add(plane)

  //   //创建一个立方体
  //   var cubeGeometry = new THREE.BoxGeometry(4, 4, 4)
  //   //将线框（wireframe）属性设置为true，这样物体就不会被渲染为实物物体
  //   var cubeMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000, wireframe: true })
  //   var cube = new THREE.Mesh(cubeGeometry, cubeMaterial)

  //   //设置立方体的位置
  //   cube.position.x = -4
  //   cube.position.y = 3
  //   cube.position.z = 0

  //   //将立方体添加到场景中
  //   scene.add(cube)

  //   //创建一个球体
  //   var sphereGeometry = new THREE.SphereGeometry(4, 20, 20)
  //   //将线框（wireframe）属性设置为true，这样物体就不会被渲染为实物物体
  //   var sphereMaterial = new THREE.MeshBasicMaterial({ color: 0x7777ff, wireframe: true })
  //   var sphere = new THREE.Mesh(sphereGeometry, sphereMaterial)

  //   //设置球体的位置
  //   sphere.position.x = 20
  //   sphere.position.y = 4
  //   sphere.position.z = 2

  //   //将球体添加到场景中
  //   scene.add(sphere)

  //   //将渲染的结果输出到指定页面元素中

  //   this.mdom.current.appendChild(renderer.domElement)

  //   //渲染场景
  //   renderer.render(scene, camera)
  // }